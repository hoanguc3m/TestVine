// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_TestVine_RCPPEXPORTS_H_GEN_
#define RCPP_TestVine_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace TestVine {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("TestVine", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("TestVine", "_TestVine_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in TestVine");
            }
        }
    }

    inline void Test_logc_Student() {
        typedef SEXP(*Ptr_Test_logc_Student)();
        static Ptr_Test_logc_Student p_Test_logc_Student = NULL;
        if (p_Test_logc_Student == NULL) {
            validateSignature("void(*Test_logc_Student)()");
            p_Test_logc_Student = (Ptr_Test_logc_Student)R_GetCCallable("TestVine", "_TestVine_Test_logc_Student");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Test_logc_Student();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Gaussian_hfunc() {
        typedef SEXP(*Ptr_Gaussian_hfunc)();
        static Ptr_Gaussian_hfunc p_Gaussian_hfunc = NULL;
        if (p_Gaussian_hfunc == NULL) {
            validateSignature("void(*Gaussian_hfunc)()");
            p_Gaussian_hfunc = (Ptr_Gaussian_hfunc)R_GetCCallable("TestVine", "_TestVine_Gaussian_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Gaussian_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Student_hfunc() {
        typedef SEXP(*Ptr_Student_hfunc)();
        static Ptr_Student_hfunc p_Student_hfunc = NULL;
        if (p_Student_hfunc == NULL) {
            validateSignature("void(*Student_hfunc)()");
            p_Student_hfunc = (Ptr_Student_hfunc)R_GetCCallable("TestVine", "_TestVine_Student_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Student_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Clayton_hfunc() {
        typedef SEXP(*Ptr_Clayton_hfunc)();
        static Ptr_Clayton_hfunc p_Clayton_hfunc = NULL;
        if (p_Clayton_hfunc == NULL) {
            validateSignature("void(*Clayton_hfunc)()");
            p_Clayton_hfunc = (Ptr_Clayton_hfunc)R_GetCCallable("TestVine", "_TestVine_Clayton_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Clayton_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Gumbel_hfunc() {
        typedef SEXP(*Ptr_Gumbel_hfunc)();
        static Ptr_Gumbel_hfunc p_Gumbel_hfunc = NULL;
        if (p_Gumbel_hfunc == NULL) {
            validateSignature("void(*Gumbel_hfunc)()");
            p_Gumbel_hfunc = (Ptr_Gumbel_hfunc)R_GetCCallable("TestVine", "_TestVine_Gumbel_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Gumbel_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Frank_hfunc() {
        typedef SEXP(*Ptr_Frank_hfunc)();
        static Ptr_Frank_hfunc p_Frank_hfunc = NULL;
        if (p_Frank_hfunc == NULL) {
            validateSignature("void(*Frank_hfunc)()");
            p_Frank_hfunc = (Ptr_Frank_hfunc)R_GetCCallable("TestVine", "_TestVine_Frank_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Frank_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void Joe_hfunc() {
        typedef SEXP(*Ptr_Joe_hfunc)();
        static Ptr_Joe_hfunc p_Joe_hfunc = NULL;
        if (p_Joe_hfunc == NULL) {
            validateSignature("void(*Joe_hfunc)()");
            p_Joe_hfunc = (Ptr_Joe_hfunc)R_GetCCallable("TestVine", "_TestVine_Joe_hfunc");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Joe_hfunc();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_TestVine_RCPPEXPORTS_H_GEN_
